# Production-Grade Dockerfile for Next.js 15.3 Application

# ---- Base Stage ----
# Use a specific Node.js version (e.g., Node 20 LTS) on Alpine for smaller images.
# Alpine is chosen for its small size, reducing the final image footprint.
FROM node:20-alpine AS base
WORKDIR /app

# ---- Dependencies Stage ----
# Install dependencies first to leverage Docker layer caching.
# This stage only runs when package.json or the lock file changes.
FROM base AS deps
# Copy package.json and lock file
COPY package.json package-lock.json* ./
# Install dependencies using 'npm ci' for faster, reproducible builds based on the lock file.
RUN npm ci

# ---- Builder Stage ----
# Build the Next.js application.
FROM base AS builder
WORKDIR /app

# Define build-time arguments (ARGs)
# These are variables needed ONLY during the build process (e.g., NEXT_PUBLIC_API_URL for static generation).
# Pass them during build: docker build --build-arg NEXT_PUBLIC_API_URL=https://api.example.com .
ARG NEXT_PUBLIC_API_URL
ARG ANOTHER_BUILD_TIME_VAR

# Set build-time environment variables from ARGs
# These ENV values are only available within this builder stage.
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
ENV ANOTHER_BUILD_TIME_VAR=${ANOTHER_BUILD_TIME_VAR}
# Disable Next.js telemetry during the build
ENV NEXT_TELEMETRY_DISABLED 1

# Copy dependencies from the 'deps' stage
COPY --from=deps /app/node_modules ./node_modules
# Copy the rest of the application source code
# Ensure .dockerignore is properly configured to exclude unnecessary files.
COPY . .

# Build the Next.js application for production
# Requires `output: 'standalone'` in next.config.js for optimal results.
# Build-time environment variables (like NEXT_PUBLIC_*) are baked into the build here.
RUN npm run build

# ---- Runner Stage ----
# Create the final, minimal image to run the application.
# Uses the same base image for consistency.
FROM base AS runner
WORKDIR /app

# Set default environment variables for production runtime
ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1
# Default port, can be overridden at runtime (e.g., docker run -p 4000:4000 -e PORT=4000 ...)
ENV PORT 3000
# Define placeholders for runtime environment variables
# These are variables needed when the container is running (e.g., database URLs, external API keys).
# They are NOT baked in during the build. Set them when running the container:
# docker run -e DATABASE_URL=... -e API_SECRET=... your-image-name
ENV DATABASE_URL=""
ENV API_SECRET=""
# Add any other runtime environment variables needed by your application here.

# Create a non-root user and group for enhanced security.
# Running as a non-root user reduces the potential impact of security vulnerabilities.
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy only the necessary artifacts from the builder stage
# This utilizes the `output: 'standalone'` feature of Next.js to minimize image size.
# Copy the standalone output directory
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
# Copy the public assets directory
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
# Copy the static assets directory (generated during build)
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Switch to the non-root user
USER nextjs

# Expose the port the app will run on
EXPOSE ${PORT}

# Healthcheck instruction
# Checks if the server is responding on the specified port.
# Adjust the path ('/') if your app doesn't serve the root path or needs a specific health endpoint.
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:${PORT}/ || exit 1

# Set the signal for graceful shutdown
# Next.js server listens for SIGTERM to shut down gracefully.
STOPSIGNAL SIGTERM

# Command to run the application
# Uses the server.js file generated by the `output: 'standalone'` build.
CMD ["node", "server.js"]

# --- Notes ---
# 1. Next.js Version: Assumes your package.json specifies Next.js 15.3.
# 2. Package Manager: Adapt 'npm ci' and 'npm run build' if using yarn or pnpm.
# 3. `output: 'standalone'`: Crucial for this Dockerfile. Ensure it's set in `next.config.js`.
#    Example `next.config.js`:
#    /** @type {import('next').NextConfig} */
#    const nextConfig = {
#      output: 'standalone',
#      // other configs...
#    };
#    module.exports = nextConfig;
# 4. .dockerignore: Use a comprehensive .dockerignore file (see previous example).
# 5. Build-time vs. Runtime Env Vars:
#    - Use `ARG` in the 'builder' stage for variables needed *only* during `npm run build`. Pass with `--build-arg`.
#    - Use `ENV` in the 'runner' stage for variables needed when the application *runs*. Set with `docker run -e`. `NEXT_PUBLIC_` variables needed at runtime must also be set here.
# 6. Security: Runs as a non-root user ('nextjs').
# 7. Healthcheck: Monitors the application's health. Customize the CMD if needed.
# 8. Graceful Shutdown: Uses SIGTERM for proper cleanup.
